<?php
/**
 * IMP Hooks configuration file.
 *
 * THE HOOKS PROVIDED IN THIS FILE ARE EXAMPLES ONLY.  DO NOT ENABLE THEM
 * BLINDLY IF YOU DO NOT KNOW WHAT YOU ARE DOING.  YOU HAVE TO CUSTOMIZE THEM
 * TO MATCH YOUR SPECIFIC NEEDS AND SYSTEM ENVIRONMENT.
 *
 * For more information please see the horde/config/hooks.php.dist file.
 *
 * $Id$
 */

class IMP_Hooks
{
    /**
     * AUTHENTICATION HOOK: pre-authentication actions.
     *
     * See horde/config/hooks.php.dist for more information.
     *
     * IMP uses the following credentials:
     *   'password' - (string) The password for mail server authentication.
     *   'server' - (string) [optional] Use this server key (see
     *              config/servers.php).
     *   'transparent' - (boolean) If $credentials['authMethod'] is
     *                   'transparent', and you would like IMP to use
     *                   the userId/credentials generated in the
     *                   preauthentication hook, this must be true. If false,
     *                   IMP will try to authenticate using hordeauth.
     */
//     function preauthenticate($userId, $credentials)
//     {
//         return true;
//     }


    /**
     * AUTHENTICATION HOOK: post-authentication actions.
     *
     * See horde/config/hooks.php.dist for more information.
     */
     function postauthenticate($userId, $credentials)
//     {
//         return true;
//     }


    /**
     * PREFERENCE HOOK: Dynamically set the signature preference.
     *
     * @param string $username  The username.
     *
     * @return string  The signature text to use.
     */
//    function prefs_hook_signature($username = null)
//    {
//        // Example #1: Set the signature from the system taglines file; the
//        // string "%TAG%" (if present in a user's signature) will be replaced
//        // by the content of the file "/usr/share/tagline" (generated by the
//        // "TaRT" utility).
//        $sig = $GLOBALS['prefs']->getValue('signature');
//        if (preg_match('/%TAG%/', $sig)) {
//            $tag = `cat /usr/share/tagline`;
//            $sig = preg_replace('|%TAG%|', $tag, $sig);
//        }
//        return $sig;
//    }


    /**
     * PREFERENCE HOOK: Dynamically set the add_source preference.
     *
     * @param string $username  The username.
     *
     * @return string  The add_source value.
     */
//    function prefs_hook_add_source($username = null)
//    {
//        if (!$username) {
//            return;
//        }
//
//        // Example #1: Useful hook when using a Turba source with shares
//        // enabled (i.e. the example localsql configuration).
//        return $GLOBALS['registry']->call('contacts/getDefaultShare');
//    }


    /**
     * PREFERENCE HOOK: Dynamically set the search_sources preference.
     *
     * @param string $username  The username.
     *
     * @return string  The search_sources value.
     */
//    function prefs_hook_search_sources($username = null)
//    {
//        if (!$username) {
//            return;
//        }
//
//        if ($GLOBALS['registry']->hasMethod('contacts/sources')) {
//            $sources = $GLOBALS['registry']->call('contacts/sources');
//            return implode("\t", array_keys($sources));
//        }
//    }

    /**
     * Perform an action after a message has been sent successfully.
     *
     * @param Horde_Mime_Part $message  The message content object.
     * @param Horde_Mime_Headers $message  The message headers object.
     */
//    function postsent($message, $headers)
//    {
//        // Do action here -- no return value from this hook.
//    }


    /**
     * Dynamically set/alter the contents of the message trailer text.
     *
     * @param string $trailer  The default trailer text.
     *
     * @return string  The trailer text to be used.
     */
//    function trailer($trailer)
//    {
//        // Example #1: Set the trailer from the system taglines file; the
//        // string "%TAG%" (if present in a user's signature) will be replaced
//        // by the content of the file "/usr/share/tagline" (generated by the
//        // "TaRT" utility).
//        if (preg_match('/%TAG%/', $trailer)) {
//            $tag = `cat /usr/share/tagline`;
//            $sig = preg_replace('|%TAG%|', $tag, $trailer);
//        }
//
//        return $trailer;
//
//
//        // Example #2: Set the trailer using the LDAP directory for each
//        // domain. This code replaces the current trailer with the data
//        // in 'ispmanDomainSignature'.
//        $vdomain = Horde_String::lower(preg_replace('|^.*?\.|i', '', getenv('HTTP_HOST')));
//        $ldapServer = 'localhost';
//        $ldapPort = '389';
//        $searchBase = 'ispmanDomain=' . $vdomain  . ",o=ispman";
//
//        $old_error = error_reporting(0);
//        $ds = ldap_connect($ldapServer, $ldapPort);
//        $searchResult = ldap_search($ds, $searchBase, 'uid=' . $vdomain);
//        $information = ldap_get_entries($ds, $searchResult);
//        $trailer = $information[0]['ispmandomainsignature'][0];
//        ldap_close($ds);
//        error_reporting($old_error);
//
//        return $trailer;
//    }


    /**
     * Add additional message flags in the message listing screen for a
     * mailbox.
     *
     * @param array $data   The overview information for a message as returned
     *                      from the IMP_Mailbox::getMailboxArray() call (see
     *                      lib/Mailbox.php for documentation on the structure
     *                      of the array).
     * @param string $mode  Either 'imp' or 'dimp'.
     *
     * @return array  An array of additional flags to add. These flags must be
     *                defined in the 'msgflags' preference. On error, return
     *                an empty array.
     */
//    function msglist_flags($data, $mode)
//    {
//        // Example #1: Add a icon if the message was sent from a user within
//        // the same domain.
//        $flags = array();
//
//        $from_ob = Horde_Mime_Address::getAddressesFromObject($data['envelope']['from']);
//        if (!empty($from_ob) &&
//            (strcasecmp($from_ob[0]['host'], 'example.com') === 0)) {
//            /* The '$indomain' flag in this example must have already been
//             * created in the 'msgflags' preference. */
//            $flags = array('$indomain');
//        }
//
//        return $flags;
//    }


    /**
     * When a mailbox is opened in IMP, allow redirection based on the mailbox
     * name.
     *
     * @param string $mailbox  The mailbox which the user has opened.
     *
     * @return string  A valid page within a Horde application which will be
     *                 placed in a "Location" header to redirect the client.
     *                 Return an empty string if the user is not to be
     *                 redirected.
     */
//    function mbox_redirect($mailbox)
//    {
//        // Example #1: Redirect to various Horde apps based on the mailbox
//        // name.
//        if ((stripos($mailbox, "INBOX/Calendar") !== false) ||
//            preg_match("!^user/[^/]+/Calendar!", $mailbox)) {
//            return $GLOBALS['registry']->get('webroot', 'kronolith');
//        } elseif ((stripos($mailbox, "INBOX/Tasks") !== false) ||
//                  preg_match("!^user/[^/]+/Tasks!", $mailbox)) {
//            return $GLOBALS['registry']->get('webroot', 'nag');
//        } elseif ((strpos($mailbox, "INBOX/Notes") !== false) ||
//                  preg_match("!^user/[^/]+/Notes!", $mailbox)) {
//            return $GLOBALS['registry']->get('webroot', 'mnemo');
//        } elseif ((strpos($mailbox, "INBOX/Contacts") !== false) ||
//                  preg_match("!^user/[^/]+/Contacts!", $mailbox)) {
//            return $GLOBALS['registry']->get('webroot', 'turba');
//        }
//
//        return '';
//
//
//        // Example #2: Kolab defaults.
//        require_once 'Horde/Kolab.php';
//        switch (Kolab::getMailboxType($mailbox)) {
//        case 'event':
//            return $GLOBALS['registry']->get('webroot', 'kronolith');
//
//        case 'task':
//            return $GLOBALS['registry']->get('webroot', 'nag');
//
//        case 'note':
//            return $GLOBALS['registry']->get('webroot', 'mnemo');
//
//        case 'contact':
//            return $GLOBALS['registry']->get('webroot', 'turba');
//
//        case 'prefs':
//            return Horde::getServiceLink('options', 'horde');
//
//        default:
//            return '';
//        }
//    }


    /**
     * Allow a custom folder icon to be specified for "standard" mailboxes
     * ("Standard" means all folders except the INBOX, sent-mail folders and
     * trash folders.)
     *
     * @return array  A list of mailboxes, with the name as keys and the
     *               values an array with 'icon', 'icondir', and 'alt' entries.
     *               If a mailbox name doesn't appear in the list, the default
     *               mailbox icon is displayed.
     */
//    function mbox_icons()
//    {
//        // Example #1: Redirection scheme for Kolab_Cyrus
//        static $newmailboxes;
//
//        if (!empty($newmailboxes)) {
//            return $newmailboxes;
//        }
//
//        require_once 'Horde/Kolab.php';
//        $kc = new Kolab_Cyrus($GLOBALS['conf']['kolab']['server']);
//        $mailboxes = $kc->listMailBoxes();
//        $newmailboxes = array();
//
//        foreach ($mailboxes as $box) {
//            $box = preg_replace("/^{[^}]+}/", "", $box);
//            if ((stripos($box, "INBOX/Calendar") !== false) ||
//                preg_match("!^user/[^/]+/Calendar!", $box)) {
//                $newmailboxes[$box] = array(
//                    'icon' => 'kronolith.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('kronolith')
//                    'alt' => _("Calendar")
//                );
//            } elseif ((stripos($box, "INBOX/Tasks") !== false) ||
//                      preg_match("!^user/[^/]+/Tasks!", $box)) {
//                $newmailboxes[$box] = array(
//                    'icon' => 'nag.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('nag')
//                    'alt' => _("Tasks")
//                );
//            } elseif ((stripos($box, "INBOX/Notes") !== false) ||
//                      preg_match("!^user/[^/]+/Notes!", $box)) {
//                $newmailboxes[$box] = array(
//                    'icon' => 'mnemo.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('mnemo')
//                    'alt' => _("Notes")
//                );
//            } elseif ((stripos($box, "INBOX/Contacts") !== false) ||
//                      preg_match("!^user/[^/]+/Contacts!", $box)) {
//                $newmailboxes[$box] = array(
//                    'icon' => 'turba.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('turba')
//                    'alt' => _("Contacts")
//                );
//            }
//        }
//
//        return $newmailboxes;
//
//
//        // Example #2: Default Kolab redirection scheme
//        if (!empty($icons)) {
//            return $icons;
//        }
//
//        require_once 'Horde/Kolab.php';
//        $folders = Kolab::listFolders();
//        $icons = array();
//        foreach ($folders as $folder) {
//            $name = preg_replace('/^{[^}]+}/', '', $folder[0]);
//
//            switch ($folder[1]) {
//            case 'event':
//                $icons[$name] = array(
//                    'icon' => 'kronolith.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('kronolith'),
//                    'alt' => _("Calendar")
//                );
//                break;
//
//            case 'task':
//                $icons[$name] = array(
//                    'icon' => 'nag.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('nag'),
//                    'alt' => _("Tasks")
//                );
//                break;
//
//            case 'note':
//                $icons[$name] = array(
//                    'icon' => 'mnemo.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('mnemo'),
//                    'alt' => _("Notes")
//                );
//                break;
//
//            case 'contact':
//                $icons[$name] = array(
//                    'icon' => 'turba.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('turba'),
//                    'alt' => _("Contacts")
//                );
//                break;
//
//            case 'prefs':
//                $icons[$name] = array(
//                    'icon' => 'prefs.png',
//                    'icondir' => $GLOBALS['registry']->getImageDir('horde'),
//                    'alt' => _("Preferences")
//                );
//                break;
//            }
//        }
//
//        return $icons;
//    }


    /**
     * Mark a mailbox as read-only.
     *
     * @param string $mailbox  The mailbox name.
     *
     * @return boolean  Is the mailbox read-only?
     */
//    function mbox_readonly($mailbox)
//    {
//        // Example #1: Make messages in the 'foo' mailbox readonly.
//        return ($mailbox == 'foo');
//    }


    /**
     * Allow additional information to be added/edited from the data that is
     * passed to the mailbox display template:
     *   imp: imp/templates/mailbox/mailbox.html
     *   dimp: imp/js/src/mailbox-dimp.js.
     *
     * If you are going to add new columns, you also have to update these
     * fields:
     *   imp: imp/mailbox.php to specify the column width.
     *   dimp: imp/templates/index/dimp.inc to contain the new field in the
     *         header
     *         imp/themes/screen-dimp.css to specify the column width.
     *
     * @param array $msgs   The mailbox data.
     * @param string $view  Either 'imp' or 'dimp'.
     *
     * @return array  The altered array to use in the template.
//    function mailboxarray($msgs, $view)
//    {
//        // Example #1: Adds a 'foo' entry to each message element.
//        switch ($view) {
//        case 'dimp':
//        case 'imp':
//            foreach (array_keys($msgs) as $key) {
//                $msgs[$key]['foo'] = true;
//            }
//            break;
//        }
//
//        return $msg;
//    }


    /**
     * Dynamically disable composing messages.
     *
     * @return boolean  Is composing disabled?
     */
//    function disable_compose()
//    {
//        // Example #1: Entirely disable composition.
//        return false;
//    }


    /**
     * Hide specified IMAP mailboxes in folder listings.
     *
     * @param string $mailbox  The mailbox name.
     *
     * @return boolean  If false, do not display the mailbox.
     */
//    function display_folder($mailbox)
//    {
//        // Example #1: Do not display the mailbox 'Foo'.
//        return ($mailbox != 'Foo');
//
//
//        // Example #2: Kolab default
//        require_once 'Horde/Kolab.php';
//        $type = Kolab::getMailboxType($mailbox);
//        return empty($type) || ($type == 'mail');
//    }


    /**
     * Provide email to use for spam reporting. This is handy for spam
     * reporting software (e.g. DSPAM) which has different e-mail aliases for
     * spam reporting for each user.
     *
     * @param string $action  Either 'spam' or 'ham'.
     *
     * @return string  An e-mail address.
     */
//    function spam_email($action)
//    {
//        // Example #1: Create e-mail for DSPAM setup.
//        $prefix = ($action == 'spam') ? 'spam-' : 'fp-';
//        return $prefix . Horde_Auth::getBareAuth() . '@example.com';
//    }


    /**
     * Determine quota for a user.
     *
     * @param array $params  Parameters for the function, set in servers.php.
     *
     * @return array  Tuple with two members:
     * <pre>
     * first: disk space used (in bytes)
     * second: maximum disk space (in bytes)
     * </pre>
     */
//    function quota($params = null)
//    {
//        // Example #1: Sample function for returning the quota.
//        // Uses the PECL ssh2 extension.
//        $host = $_SESSION['imp']['server'];
//        $user = $_SESSION['imp']['user'];
//        $pass = Horde_Auth::getCredential('password');
//        $command = $params[0];
//
//        $session = ssh2_connect($host);
//        if (!$session) {
//            throw new Horde_Exception(_("Connection to server failed."), 'horde.error');
//        }
//
//        if (!ssh2_auth_password($session, $user, $pass)) {
//            throw new Horde_Exception(_("Authentication failed."), 'horde.error');
//        }
//
//        $stream = ssh2_exec($session, $command, false);
//        stream_set_blocking($stream, true);
//
//        $quota = preg_split('/\s+/', trim(stream_get_contents($stream)), 2);
//        return array($quota[1] * 1024, $quota[2] * 1024);
//    }

    /**
     * Retrieves public S/MIME keys of message recipients.
     *
     * The hook will be called first when searching for the keys, and further
     * lookup techniques will only be used if the hook throws an excpetion or
     * returns an empty result.
     *
     * @param string $address  The email address of the recipient.
     *
     * @return string  The base64-encoded public S/MIME key that matches the
     *                 email address.
     */
//    public function smime_key($address)
//    {
//        $ldapServer = 'localhost';
//        $ldapPort = 389;
//        $searchBase = 'ou=users,dc=example,dc=com';
//        $binddn = 'uid=admin,dc=example,dc=com';
//        $bindpw = 'secret';
//        $attribute = 'simepublickey';
//
//        if (!@ldap_connect($ldapServer, $ldapPort)) {
//            return;
//        }
//        if (!@ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {
//            return;
//        }
//        if (!@ldap_bind($ds, $binddn, $bindpw)) {
//            return;
//        }
//
//        $searchResult = @ldap_search($ds, $searchBase, 'mail=' . $address);
//        $information = @ldap_get_entries($ds, $searchResult);
//        ldap_close($ds);
//
//        if ($information === false || $information['count'] == 0) {
//            return;
//        }
//
//        return $information[0][$attribute][0];
//    }

    /**
     * Retrieves public PGP keys of message recipients.
     *
     * The hook will be called first when searching for the keys, and further
     * lookup techniques will only be used if the hook throws an excpetion or
     * returns an empty result.
     *
     * @param string $address  The email address of the recipient.
     * @param string $keyid    The PGP key id of the recipient.
     *
     * @return string  The base64-encoded public PGP key that matches either
     *                 the email address or the fingerprint.
     */
//    public function pgp_key($address, $keyid)
//    {
//        $ldapServer = 'localhost';
//        $ldapPort = 389;
//        $searchBase = 'ou=users,dc=example,dc=com';
//        $binddn = 'uid=admin,dc=example,dc=com';
//        $bindpw = 'secret';
//        $attribute = 'pgppublickey';
//
//        if (!@ldap_connect($ldapServer, $ldapPort)) {
//            return;
//        }
//        if (!@ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {
//            return;
//        }
//        if (!@ldap_bind($ds, $binddn, $bindpw)) {
//            return;
//        }
//
//        $searchResult = @ldap_search($ds, $searchBase, 'mail=' . $address);
//        $information = @ldap_get_entries($ds, $searchResult);
//        ldap_close($ds);
//
//        if ($information === false || $information['count'] == 0) {
//            return;
//        }
//
//        return $information[0][$attribute][0];
//    }

    /**
     * DIMP: Allow additional information to be added to the array that is
     * passed to the message text display template:
     *   imp/templates/chunks/message.php.
     *
     * @param array $msg  The current entry array (see the showMessage()
     *                    function in lib/Views/ShowMessage.php for the
     *                    format.
     *
     * @return array  The altered array to use in the template.
     */
//    function dimp_messageview($msg)
//    {
//        // Example #1: Add a new foo variable
//        $msg['foo'] = '<div class="foo">BAR</div>';
//        return $msg;
//    }


    /**
     * DIMP: Allows additional information to be added to the preview view and
     * its corresponding template:
     *   imp/templates/index/index-dimp.inc.
     *
     * Since the preview pane is dynamically updated via javascript, all
     * updates other than the base entries must be provided in javascript code
     * to be run at update time.
     *
     * @param array $msg  The current entry array (see the showMessage()
     *                    function in lib/Views/ShowMessage.php for the
     *                    format.
     *
     * @return array  A 2 element array - the first element is the original
     *                array with any changes made to the initial data. The
     *                second element is an array of javascript commands, one
     *                command per array value.
     */
//    function dimp_previewview($msg) {
//        // Example #1: Alter the subject
//        $msg['subject'] .= 'test';
//
//        // Example #2: Update the DOM ID 'foo' with the value 'bar'. 'foo'
//        // needs to be manually added to the HTML template.
//        $js_code = array(
//            "$('foo').update('bar')"
//        );
//
//        return array($msg, $js_code);
//    }


    /**
     * DIMP: Allows alteration of address formatting in email message headers.
     *
     * @param stdClass $ob  Object with the following possible properties:
     * <pre>
     * 'address' - Full address
     * 'display' - Display address
     * 'host' - Host name
     * 'inner' - Trimmed, bare address
     * 'personal' - Personal string
     * </pre>
     *
     * @return string  The raw string to display for that address. This value
     *                 must be properly escaped (i.e. htmlspecialchars() used
     *                 on the portions of the string where appropriate).
     */
//    function dimp_addressformatting($ob)
//    {
//         // Example #1: Display only the raw text of the personal name
//         // or, if not set, the e-mail address.
//         return empty($ob['personal']) ? $ob['address'] : $ob['personal'];
//    }

}
